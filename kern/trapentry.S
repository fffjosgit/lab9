/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.globl in_intr
.comm in_intr, 1

.text

//#define T_DIVIDE     0		// divide error
//#define T_DEBUG      1		// debug exception
//#define T_NMI        2		// non-maskable interrupt
//#define T_BRKPT      3		// breakpoint
//#define T_OFLOW      4		// overflow
//#define T_BOUND      5		// bounds check
//#define T_ILLOP      6		// illegal opcode
//#define T_DEVICE     7		// device not available
//#define T_DBLFLT     8		// double fault
/* #define T_COPROC  9 */	// reserved (not generated by recent processors)
//#define T_TSS       10		// invalid task switch segment
//#define T_SEGNP     11		// segment not present
//#define T_STACK     12		// stack exception
//#define T_GPFLT     13		// general protection fault
//#define T_PGFLT     14		// page fault
/* #define T_RES    15 */	// reserved
//#define T_FPERR     16		// floating point error
//#define T_ALIGN     17		// aligment check
//#define T_MCHK      18		// machine check
//#define T_SIMDERR   19        // SIMD floating point error

//#define T_SYSCALL   48		// system call

//Description                       Interrupt     Error Code
//Divide error                       0            No
//Debug exceptions                   1            No
//Breakpoint                         3            No
//Overflow                           4            No
//Bounds check                       5            No
//Invalid opcode                     6            No
//Coprocessor not available          7            No
//System error                       8            Yes (always 0)
//Coprocessor Segment Overrun        9            No
//Invalid TSS                       10            Yes
//Segment not present               11            Yes
//Stack exception                   12            Yes
//General protection fault          13            Yes
//Page fault                        14            Yes
//Coprocessor error                 16            No
//Two-byte SW interrupt             0-255         No

// Hardware IRQ numbers. We receive these as (IRQ_OFFSET+IRQ_WHATEVER)
//#define IRQ_TIMER        0      //system timer
//#define IRQ_KBD          1      //keyboard
//#define IRQ_IRQ2         2      //2nd IRQ controller
//#define IRQ_SERIAL2      3      //COM2
//#define IRQ_SERIAL       4      //COM1
//#define IRQ_FREE         5      //free: LPT2 or sound card
//#define IRQ_FLOPPY       6      //floppy disk
//#define IRQ_LPT1         7      //LPT1
//#define IRQ_RTC          8      //real time clock
//#define IRQ_FREE         9      //free: may be labeled/appear as IRQ 2
//#define IRQ_FREE        10      //free: often used by sound cards
//#define IRQ_FREE        11
//#define IRQ_MOUSE       12      //PS/2 mouse
//#define IRQ_MCOP        13      //math coprocessor on CPU (used)
//#define IRQ_IDE         14      //primary IDE
//#define IRQ_IDE2        15      //secondary IDE
//#define IRQ_ERROR       19
//#define IRQ_SPURIOUS    31

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER_NOEC(diverr_entry, T_DIVIDE)
TRAPHANDLER_NOEC(debug_entry, T_DEBUG)
TRAPHANDLER_NOEC(nmi_entry, T_NMI)
TRAPHANDLER_NOEC(brkpt_entry, T_BRKPT)
TRAPHANDLER_NOEC(overflow_entry, T_OFLOW)
TRAPHANDLER_NOEC(bound_entry, T_BOUND)
TRAPHANDLER_NOEC(illop_entry, T_ILLOP)
TRAPHANDLER_NOEC(device_entry, T_DEVICE)
TRAPHANDLER(dblflt_entry, T_DBLFLT)
TRAPHANDLER(tss_entry, T_TSS)
TRAPHANDLER(segnp_entry, T_SEGNP)
TRAPHANDLER(stack_entry, T_STACK)
TRAPHANDLER(gpflt_entry, T_GPFLT)
TRAPHANDLER(pgflt_entry, T_PGFLT)
TRAPHANDLER_NOEC(fperr_entry, T_FPERR)
TRAPHANDLER(align_entry, T_ALIGN)
TRAPHANDLER_NOEC(mchk_entry, T_MCHK)
TRAPHANDLER_NOEC(simderr_entry, T_SIMDERR)

TRAPHANDLER_NOEC(syscall_entry, T_SYSCALL)

//hardware interrupts

TRAPHANDLER_NOEC(irq0_entry, IRQ_OFFSET + 0); //IRQ_TIMER
TRAPHANDLER_NOEC(irq1_entry, IRQ_OFFSET + 1); //IRQ_KBD
TRAPHANDLER_NOEC(irq2_entry, IRQ_OFFSET + 2);
TRAPHANDLER_NOEC(irq3_entry, IRQ_OFFSET + 3);
TRAPHANDLER_NOEC(irq4_entry, IRQ_OFFSET + 4);
TRAPHANDLER_NOEC(irq5_entry, IRQ_OFFSET + 5);
TRAPHANDLER_NOEC(irq6_entry, IRQ_OFFSET + 6);
TRAPHANDLER_NOEC(irq7_entry, IRQ_OFFSET + 7);
TRAPHANDLER_NOEC(irq8_entry, IRQ_OFFSET + 8);
TRAPHANDLER_NOEC(irq9_entry, IRQ_OFFSET + 9);
TRAPHANDLER_NOEC(irq10_entry, IRQ_OFFSET + 10);
TRAPHANDLER_NOEC(irq11_entry, IRQ_OFFSET + 11);
TRAPHANDLER_NOEC(irq12_entry, IRQ_OFFSET + 12);
TRAPHANDLER_NOEC(irq13_entry, IRQ_OFFSET + 13);
TRAPHANDLER_NOEC(irq14_entry, IRQ_OFFSET + 14);


/*
 * Lab 3: Your code here for _alltraps
 */

.globl _alltraps
_alltraps:
	pushl %ds
    pushl %es

    pushal

    movl $GD_KD, %eax
	movw %ax, %ds
	movw %ax, %es

	// disable FL_IF in %eflags, i.e. disable interrupts
	pushfl
	popl %eax
	movl $FL_IF, %ebx
	notl %ebx
	andl %ebx, %eax
	pushl %eax
	popfl
	// end of disabling FL_IF

    pushl %esp  /* trap(%esp) */
    call trap

    pop %esp
    popal
    popl %es
    popl %ds

    iret

/*.data
.globl trap_handlers
trap_handlers:
	.long thdlr0
*/
